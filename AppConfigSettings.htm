<!doctype html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <title>App Config Solution</title>
    <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <script type="text/javascript">
        function loadConfigSettings() {
            currentPath = [];
           if (typeof (Storage) !== "undefined") {
               if (localStorage.getItem("config")) {
                  config = localStorage.getItem("config");
                  config = JSON.parse(config);
                  loadConfigTags(config);
               } else {
                   alert("Unable To Load config Settings; Please reload this tool.");
               }
           } else {
               alert("App Config Tool Doesn't supported");
           }           
       }

        function loadConfigTags(configObject, path) {
            if (path) {
                currentPath.push(path);
            }
           var AppConfigTableContainer = document.getElementById("AppConfigTableContainer");           
           for (var key in configObject) {
               if (configObject.hasOwnProperty(key)) {
                   var tableRow = document.createElement("TR");
                   var tableRowTd = document.createElement("TD");
                   var label = document.createElement("Label");
                   label.innerHTML = key + " : ";
                   tableRowTd.appendChild(label);
                   tableRow.appendChild(tableRowTd);
                   if (typeof (configObject[key]) == 'object') {
                       var tableRowTd = document.createElement("TD");                       
                       tableRow.appendChild(tableRowTd);
                       AppConfigTableContainer.appendChild(tableRow);
                       loadConfigTags(configObject[key], key);
                   } else {
                       var tableRowTd = document.createElement("TD");
                       var labelValue = document.createElement("INPUT");
                       labelValue["sourcePath"] = currentPath.length > 0 ? currentPath.join("_") + "_" + key : key;
                       labelValue.style.width = "260px";
                       labelValue.value = configObject[key];
                       labelValue.addEventListener("change", function (evt) {
                           var path = this.sourcePath.split("_");
                           var updatedValue = config;
                           for (var i = 0; i < path.length -1; i++) {
                               updatedValue = updatedValue[path[i]];
                           }
                           updatedValue[path[path.length - 1]] = evt.currentTarget.value;
                           localStorage.setItem("config", JSON.stringify(config));
                       });
                       tableRowTd.appendChild(labelValue);
                       tableRow.appendChild(tableRowTd);
                       AppConfigTableContainer.appendChild(tableRow);
                   }                  
                  
               }
           }          
           currentPath.pop();          
       }        

        // Code to be added in bootstrapper.js before assigning config in global object

        //if (typeof (Storage) !== "undefined") {
        //    if (localStorage.getItem("config")) {
        //        config = localStorage.getItem("config");
        //        config = JSON.parse(config)
        //    } else {
        //        localStorage.setItem("config", JSON.stringify(config));
        //    }
        //}

    </script>
    </head>
<body onload="loadConfigSettings()">   
    <div>Config Settings</div>
        <div id="AppConfigContainer">
            <table>
                <tbody id="AppConfigTableContainer">
                    <tr>
                        <th> Tag</th>
                        <th>Value</th>
                    </tr>
                </tbody>
            </table>
        </div>
</body>
</html>
